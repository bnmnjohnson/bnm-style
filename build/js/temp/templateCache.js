<<<<<<< HEAD
<<<<<<< HEAD
angular.module("templatescache", []).run(["$templateCache", function($templateCache) {$templateCache.put("home.html","<h1> Hi!</h1>");
=======
angular.module("templatescache", []).run(["$templateCache", function($templateCache) {$templateCache.put("home.html","\n\n<h1> Welcome to JEAN</h1>\n<p>Jean combines jquery, express, angular and node to automate and compile simple web projects.</p>\n<p>Gulp has been configured to automate and compile your /build folder to /public.</p>\n<br/>\n<hr/>\n<br/>\n<h2> Libraries </h2>\n<p>This boilerplate comes with more than just denim, we\'ve added a few common libraries to help get started:</p>\n<p>\n<ul>\n	<li><pre>Angular-Touch</pre></li>\n	<li><pre>Angular-Animate</pre></li>\n	<li><pre>Angular-Route</pre></li>\n	<li><pre>Angular-$templateCache</pre></li>\n	<li><pre>Angular-Masonry</pre></li>\n	<li><pre>Angular-Images-Loaded</pre></li>\n	</ul>\n</p><br/>\n<p>See the github pages for these libraries for usage instructions </p>\n\n<br/>\n<hr/>\n<br/>\n\n\n\n<h2>Routes / Views</h2>\n<p>Angular uses templates to dynamically load in content pages. In JEAN, Angular-Route has been setup to use the $templateCache so your views will load instantaniously. <br/>Just be sure to compile the views folder using gulp.</p>\n<br/>\n<hr/>\n<br/>\n\n<h2>Styles</h2>\n<p> There is a stylesheet.scss and three partial files are set up with limitted styles pre-defined. <br/>Add a css framework or define your own styles to get the site looking snazzy.</p>\n<br/>\n<hr/>\n<br/>\n\n<h2>Folder Structure</h2>\n<p> There\'s only really one folder you need to modify which is <span class=\"pre\">./build</span>. Gulp automates based on the contents of this folder. <br/> However, it\'s important to note each sub-folder has specific tasks:</p><br/>\n<ul>\n	<li>ASSETS: <pre>&#9;</pre> 	The whole folder is moved to <pre>./public/src/assets/</pre></li>\n	<li>HTML: <pre>&#9;</pre> 		<pre>.html</pre> files will be moved to the root of <pre>./pubilc</pre>. Keep this reserved for <pre>index.html</pre> and <pre>error.html</pre></li>\n	<li>JS: <pre>&#9;</pre> 		Moves <pre>data.js</pre>, <pre>angular-app.js</pre>, and <pre>templateCache.js</pre> to <pre>./public/src/js/</pre>. Additional files will need to be added to gulp\'s streamqueue.</li>\n	<li>SCSS: <pre>&#9;</pre> 		Compiles <pre>.scss</pre> files and moves them to <pre>./public/src/css/</pre></li>\n	<li>VIEWS: <pre>&#9;</pre> 		Compiles <pre>.html</pre> files into a template file and moves it to <pre>./build/js/temp/templateCache.js</pre></li>\n</ul>\n<br/>\n<hr/>\n<br/>\n\n<h2>Data.js</h2>\n<p> There is a file called <span class=\"pre\">data.js</span> that acts as a JSON sandbox. Add objects or datasets in here and call them using <span class=\"pre\">$scope.data</span> in Angular.</p>\n<br/>\n<hr/>\n<br/>\n\n");
>>>>>>> parent of cac9b76... updated styles
=======
angular.module("templatescache", []).run(["$templateCache", function($templateCache) {$templateCache.put("home.html","\n\n<h1> Welcome to JEAN</h1>\n<p>Jean combines jquery, express, angular and node to automate and compile simple web projects.</p>\n<p>Gulp has been configured to automate and compile your /build folder to /public.</p>\n<br/>\n<hr/>\n<br/>\n<h2> Libraries </h2>\n<p>This boilerplate comes with more than just denim, we\'ve added a few common libraries to help get started:</p>\n<p>\n<ul>\n	<li><pre>Angular-Touch</pre></li>\n	<li><pre>Angular-Animate</pre></li>\n	<li><pre>Angular-Route</pre></li>\n	<li><pre>Angular-$templateCache</pre></li>\n	<li><pre>Angular-Masonry</pre></li>\n	<li><pre>Angular-Images-Loaded</pre></li>\n	</ul>\n</p><br/>\n<p>See the github pages for these libraries for usage instructions </p>\n\n<br/>\n<hr/>\n<br/>\n\n\n\n<h2>Routes / Views</h2>\n<p>Angular uses templates to dynamically load in content pages. In JEAN, Angular-Route has been setup to use the $templateCache so your views will load instantaniously. <br/>Just be sure to compile the views folder using gulp.</p>\n<br/>\n<hr/>\n<br/>\n\n<h2>Styles</h2>\n<p> There is a stylesheet.scss and three partial files are set up with limitted styles pre-defined. <br/>Add a css framework or define your own styles to get the site looking snazzy.</p>\n<br/>\n<hr/>\n<br/>\n\n<h2>Folder Structure</h2>\n<p> There\'s only really one folder you need to modify which is <span class=\"pre\">./build</span>. Gulp automates based on the contents of this folder. <br/> However, it\'s important to note each sub-folder has specific tasks:</p><br/>\n<ul>\n	<li>ASSETS: <pre>&#9;</pre> 	The whole folder is moved to <pre>./public/src/assets/</pre></li>\n	<li>HTML: <pre>&#9;</pre> 		<pre>.html</pre> files will be moved to the root of <pre>./pubilc</pre>. Keep this reserved for <pre>index.html</pre> and <pre>error.html</pre></li>\n	<li>JS: <pre>&#9;</pre> 		Moves <pre>data.js</pre>, <pre>angular-app.js</pre>, and <pre>templateCache.js</pre> to <pre>./public/src/js/</pre>. Additional files will need to be added to gulp\'s streamqueue.</li>\n	<li>SCSS: <pre>&#9;</pre> 		Compiles <pre>.scss</pre> files and moves them to <pre>./public/src/css/</pre></li>\n	<li>VIEWS: <pre>&#9;</pre> 		Compiles <pre>.html</pre> files into a template file and moves it to <pre>./build/js/temp/templateCache.js</pre></li>\n</ul>\n<br/>\n<hr/>\n<br/>\n\n<h2>Data.js</h2>\n<p> There is a file called <span class=\"pre\">data.js</span> that acts as a JSON sandbox. Add objects or datasets in here and call them using <span class=\"pre\">$scope.data</span> in Angular.</p>\n<br/>\n<hr/>\n<br/>\n\n");
>>>>>>> parent of cac9b76... updated styles
$templateCache.put("view1.html","<h1> This is view 1 </h1>");
$templateCache.put("view2.html","<h1>This is view 2 </h1>");
$templateCache.put("view3.html","<h1> View 3 </h1>\n<p> The route params are: {{routeId}}</p>");}]);